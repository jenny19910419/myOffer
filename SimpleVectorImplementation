template <class T>
class CArray {
    T size;
    T* ptr;
public:
    CArray(int s = 0);
    CArray(CArray &a);
    ~CArray();
    void push_back(T v);
    CArray &operator=(const CArray &a);
    int length() {return size;}
    
};

template <class T>
CArray<T>::CArray(int s):size(s)
{
    if (s==0) {
        ptr = NULL;
    }
    else ptr = new int[s];
}

template <class T>
CArray<T>::CArray(CArray &a) {
    if(!a.ptr) {
        ptr = NULL;
        size = 0;
        return;
    }
    ptr =new int[a.size];
    memcpy(ptr, a.ptr, sizeof(int) * a.size);
    size = a.size;
}


template <class T>
CArray<T>::~CArray()
{
    if (ptr) {
        delete[] ptr;
    }
}

template <class T>
CArray<T>& CArray<T>::operator=(const CArray &a) {
    if(ptr==a.ptr)
        return *this;
    if (a.ptr==NULL) {
        if(ptr) delete[] ptr;
        ptr = NULL;
        size = 0;
        return *this;
    }
    if (size < a.size) {
        if (ptr) {
            delete[] ptr;
        }
        ptr = new int[a.size];
    }
    memcpy(ptr, a.ptr, sizeof(int)*a.size);
    size = a.size;
    return *this;
}

template <class T>
void CArray<T>::push_back(T v) {
    if (ptr) {
        int *tmpPtr = new int[size+1];
        memcpy(tmpPtr, ptr, sizeof(int) * size);
        delete[] ptr;
        ptr = tmpPtr;
    }
    else
        ptr = new int[1];
    ptr[size++] = v;
}
